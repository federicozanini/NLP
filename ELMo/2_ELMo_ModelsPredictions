{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NEW 3 - ELMo_ModelsPredictions","provenance":[{"file_id":"1j0M0HrShpkOOyEFlw4XR0ZKHq0QJEV13","timestamp":1621781645256},{"file_id":"1GZGjKde5OctIU26P2xpgorjachGXF6GH","timestamp":1621589692980}],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"yA9e4-UWL3GO"},"source":["#PREDICTING ELMo DATASET'S ANSWERS WITH BEST EXPLORATIVE MODELS\n","- GLOVE MODEL1\n","- GLOVE MODEL2\n","- GLOVE EXPERIMENT4\n","- TRAINABLE MODEL1"]},{"cell_type":"markdown","metadata":{"id":"86YIOEyjefGb"},"source":["##LOADING MATERIALS AND H5-FILES"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8HfNbylvMrQo","executionInfo":{"status":"ok","timestamp":1621847093567,"user_tz":-120,"elapsed":16935,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"a6c35f8e-1dcd-4760-dfba-90e1c88c412c"},"source":["!git clone https://github.com/federicozanini/NLP.git"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Cloning into 'NLP'...\n","remote: Enumerating objects: 134, done.\u001b[K\n","remote: Counting objects: 100% (47/47), done.\u001b[K\n","remote: Compressing objects: 100% (37/37), done.\u001b[K\n","remote: Total 134 (delta 13), reused 41 (delta 7), pack-reused 87\u001b[K\n","Receiving objects: 100% (134/134), 314.74 MiB | 28.82 MiB/s, done.\n","Resolving deltas: 100% (38/38), done.\n","Checking out files: 100% (31/31), done.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kD8k0kNrXbZT","executionInfo":{"status":"ok","timestamp":1621847114892,"user_tz":-120,"elapsed":21334,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"05014bae-7065-459c-cb65-8d0ef2b3862b"},"source":["!wget https://github.com/federicozanini/NLP/releases/download/glove/model1_attention.h5\n","!wget https://github.com/federicozanini/NLP/releases/download/glove2/model2_additiveattention.h5\n","!wget https://github.com/federicozanini/NLP/releases/download/glove1/experiment4.h5\n","!wget https://github.com/federicozanini/NLP/releases/download/trainable/model1_multiheadattention.h5"],"execution_count":8,"outputs":[{"output_type":"stream","text":["--2021-05-24 09:04:53--  https://github.com/federicozanini/NLP/releases/download/glove/model1_attention.h5\n","Resolving github.com (github.com)... 140.82.121.4\n","Connecting to github.com (github.com)|140.82.121.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-releases.githubusercontent.com/299663849/d67fa400-b72e-11eb-8be8-c9514fb23bcf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090453Z&X-Amz-Expires=300&X-Amz-Signature=686f6f5986bf4c4de257e342c22497290b723e711726abc06cb13ef4b027741e&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3Dmodel1_attention.h5&response-content-type=application%2Foctet-stream [following]\n","--2021-05-24 09:04:53--  https://github-releases.githubusercontent.com/299663849/d67fa400-b72e-11eb-8be8-c9514fb23bcf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090453Z&X-Amz-Expires=300&X-Amz-Signature=686f6f5986bf4c4de257e342c22497290b723e711726abc06cb13ef4b027741e&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3Dmodel1_attention.h5&response-content-type=application%2Foctet-stream\n","Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.108.154, 185.199.109.154, 185.199.110.154, ...\n","Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.108.154|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 197358624 (188M) [application/octet-stream]\n","Saving to: ‘model1_attention.h5’\n","\n","model1_attention.h5 100%[===================>] 188.22M  39.0MB/s    in 4.9s    \n","\n","2021-05-24 09:04:58 (38.6 MB/s) - ‘model1_attention.h5’ saved [197358624/197358624]\n","\n","--2021-05-24 09:04:58--  https://github.com/federicozanini/NLP/releases/download/glove2/model2_additiveattention.h5\n","Resolving github.com (github.com)... 140.82.121.4\n","Connecting to github.com (github.com)|140.82.121.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-releases.githubusercontent.com/299663849/7984ed80-b730-11eb-9b64-fdc099575cf8?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090458Z&X-Amz-Expires=300&X-Amz-Signature=cbb760e8f92539e74d247fd874ac2a589e7fa56f126cb9dae8dcc55c4053c95a&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3Dmodel2_additiveattention.h5&response-content-type=application%2Foctet-stream [following]\n","--2021-05-24 09:04:58--  https://github-releases.githubusercontent.com/299663849/7984ed80-b730-11eb-9b64-fdc099575cf8?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090458Z&X-Amz-Expires=300&X-Amz-Signature=cbb760e8f92539e74d247fd874ac2a589e7fa56f126cb9dae8dcc55c4053c95a&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3Dmodel2_additiveattention.h5&response-content-type=application%2Foctet-stream\n","Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.111.154, 185.199.108.154, 185.199.109.154, ...\n","Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.111.154|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 197363584 (188M) [application/octet-stream]\n","Saving to: ‘model2_additiveattention.h5’\n","\n","model2_additiveatte 100%[===================>] 188.22M  47.8MB/s    in 7.3s    \n","\n","2021-05-24 09:05:06 (25.9 MB/s) - ‘model2_additiveattention.h5’ saved [197363584/197363584]\n","\n","--2021-05-24 09:05:06--  https://github.com/federicozanini/NLP/releases/download/glove1/experiment4.h5\n","Resolving github.com (github.com)... 140.82.121.4\n","Connecting to github.com (github.com)|140.82.121.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-releases.githubusercontent.com/299663849/240a1880-b7e4-11eb-9ace-c6c8b5e651ae?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090506Z&X-Amz-Expires=300&X-Amz-Signature=12fa9bf2153159cbef0a63aab8c70ead0ef12d713c988c2d49fbc0a831169ff9&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3Dexperiment4.h5&response-content-type=application%2Foctet-stream [following]\n","--2021-05-24 09:05:06--  https://github-releases.githubusercontent.com/299663849/240a1880-b7e4-11eb-9ace-c6c8b5e651ae?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090506Z&X-Amz-Expires=300&X-Amz-Signature=12fa9bf2153159cbef0a63aab8c70ead0ef12d713c988c2d49fbc0a831169ff9&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3Dexperiment4.h5&response-content-type=application%2Foctet-stream\n","Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.109.154, 185.199.111.154, 185.199.108.154, ...\n","Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.109.154|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 197363384 (188M) [application/octet-stream]\n","Saving to: ‘experiment4.h5’\n","\n","experiment4.h5      100%[===================>] 188.22M  50.3MB/s    in 5.0s    \n","\n","2021-05-24 09:05:11 (37.3 MB/s) - ‘experiment4.h5’ saved [197363384/197363384]\n","\n","--2021-05-24 09:05:11--  https://github.com/federicozanini/NLP/releases/download/trainable/model1_multiheadattention.h5\n","Resolving github.com (github.com)... 140.82.121.3\n","Connecting to github.com (github.com)|140.82.121.3|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-releases.githubusercontent.com/299663849/08ddd100-b730-11eb-913f-8b6a7aaa03ff?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090512Z&X-Amz-Expires=300&X-Amz-Signature=edc1b009c6ffcf9d565d900caf21c0502cebfc97216346c2c04f61e0ed9a05e9&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3Dmodel1_multiheadattention.h5&response-content-type=application%2Foctet-stream [following]\n","--2021-05-24 09:05:12--  https://github-releases.githubusercontent.com/299663849/08ddd100-b730-11eb-913f-8b6a7aaa03ff?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090512Z&X-Amz-Expires=300&X-Amz-Signature=edc1b009c6ffcf9d565d900caf21c0502cebfc97216346c2c04f61e0ed9a05e9&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3Dmodel1_multiheadattention.h5&response-content-type=application%2Foctet-stream\n","Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.108.154, 185.199.111.154, 185.199.110.154, ...\n","Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.108.154|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 96529408 (92M) [application/octet-stream]\n","Saving to: ‘model1_multiheadattention.h5’\n","\n","model1_multiheadatt 100%[===================>]  92.06M  47.0MB/s    in 2.0s    \n","\n","2021-05-24 09:05:14 (47.0 MB/s) - ‘model1_multiheadattention.h5’ saved [96529408/96529408]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vVN6HmElRDTL","executionInfo":{"status":"ok","timestamp":1621847118129,"user_tz":-120,"elapsed":3243,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"bb427f7a-1d6e-40e0-cf44-29f456146df1"},"source":["!wget https://github.com/federicozanini/NLP/releases/download/elmo_test_set/ELMO_final_NO_broken_rows.json\n","!wget https://github.com/federicozanini/NLP/releases/download/elmo_test_set/ELMO_final_NO_broken_rows.zip\n","!wget https://github.com/federicozanini/NLP/releases/download/elmo_test_set/ELMO_final_with_broken_rows.json\n","!wget https://github.com/federicozanini/NLP/releases/download/elmo_test_set/ELMO_final_with_broken_rows.zip"],"execution_count":9,"outputs":[{"output_type":"stream","text":["--2021-05-24 09:05:14--  https://github.com/federicozanini/NLP/releases/download/elmo_test_set/ELMO_final_NO_broken_rows.json\n","Resolving github.com (github.com)... 140.82.121.3\n","Connecting to github.com (github.com)|140.82.121.3|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-releases.githubusercontent.com/299663849/8d26cd00-bbe4-11eb-98f1-974ee5958410?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090514Z&X-Amz-Expires=300&X-Amz-Signature=6b1a83f619070a62830aaa6473369137d2e38a2fc73e9a44a0324ffc99fd6574&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DELMO_final_NO_broken_rows.json&response-content-type=application%2Foctet-stream [following]\n","--2021-05-24 09:05:14--  https://github-releases.githubusercontent.com/299663849/8d26cd00-bbe4-11eb-98f1-974ee5958410?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090514Z&X-Amz-Expires=300&X-Amz-Signature=6b1a83f619070a62830aaa6473369137d2e38a2fc73e9a44a0324ffc99fd6574&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DELMO_final_NO_broken_rows.json&response-content-type=application%2Foctet-stream\n","Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.108.154, 185.199.109.154, 185.199.111.154, ...\n","Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.108.154|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1383020 (1.3M) [application/octet-stream]\n","Saving to: ‘ELMO_final_NO_broken_rows.json’\n","\n","ELMO_final_NO_broke 100%[===================>]   1.32M  --.-KB/s    in 0.06s   \n","\n","2021-05-24 09:05:14 (21.1 MB/s) - ‘ELMO_final_NO_broken_rows.json’ saved [1383020/1383020]\n","\n","--2021-05-24 09:05:14--  https://github.com/federicozanini/NLP/releases/download/elmo_test_set/ELMO_final_NO_broken_rows.zip\n","Resolving github.com (github.com)... 140.82.121.4\n","Connecting to github.com (github.com)|140.82.121.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-releases.githubusercontent.com/299663849/8a2bdc80-bbe4-11eb-8b68-3ce800cc2e6b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090515Z&X-Amz-Expires=300&X-Amz-Signature=5145d271063b2f20bdb59e6008936dfa16817288dfdba3555055306ee11277d9&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DELMO_final_NO_broken_rows.zip&response-content-type=application%2Foctet-stream [following]\n","--2021-05-24 09:05:15--  https://github-releases.githubusercontent.com/299663849/8a2bdc80-bbe4-11eb-8b68-3ce800cc2e6b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090515Z&X-Amz-Expires=300&X-Amz-Signature=5145d271063b2f20bdb59e6008936dfa16817288dfdba3555055306ee11277d9&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DELMO_final_NO_broken_rows.zip&response-content-type=application%2Foctet-stream\n","Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.109.154, 185.199.110.154, 185.199.108.154, ...\n","Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.109.154|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2333499 (2.2M) [application/octet-stream]\n","Saving to: ‘ELMO_final_NO_broken_rows.zip’\n","\n","ELMO_final_NO_broke 100%[===================>]   2.22M  --.-KB/s    in 0.09s   \n","\n","2021-05-24 09:05:15 (24.3 MB/s) - ‘ELMO_final_NO_broken_rows.zip’ saved [2333499/2333499]\n","\n","--2021-05-24 09:05:15--  https://github.com/federicozanini/NLP/releases/download/elmo_test_set/ELMO_final_with_broken_rows.json\n","Resolving github.com (github.com)... 140.82.121.3\n","Connecting to github.com (github.com)|140.82.121.3|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-releases.githubusercontent.com/299663849/8dbf6380-bbe4-11eb-8e9d-88d343f391b4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090515Z&X-Amz-Expires=300&X-Amz-Signature=ca80b8a2381bd79bd6484b78c49fa16e173dc952cd3f21799b95e45bfc8cc043&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DELMO_final_with_broken_rows.json&response-content-type=application%2Foctet-stream [following]\n","--2021-05-24 09:05:15--  https://github-releases.githubusercontent.com/299663849/8dbf6380-bbe4-11eb-8e9d-88d343f391b4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090515Z&X-Amz-Expires=300&X-Amz-Signature=ca80b8a2381bd79bd6484b78c49fa16e173dc952cd3f21799b95e45bfc8cc043&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DELMO_final_with_broken_rows.json&response-content-type=application%2Foctet-stream\n","Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.108.154, 185.199.111.154, 185.199.110.154, ...\n","Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.108.154|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2277535 (2.2M) [application/octet-stream]\n","Saving to: ‘ELMO_final_with_broken_rows.json’\n","\n","ELMO_final_with_bro 100%[===================>]   2.17M  7.51MB/s    in 0.3s    \n","\n","2021-05-24 09:05:16 (7.51 MB/s) - ‘ELMO_final_with_broken_rows.json’ saved [2277535/2277535]\n","\n","--2021-05-24 09:05:16--  https://github.com/federicozanini/NLP/releases/download/elmo_test_set/ELMO_final_with_broken_rows.zip\n","Resolving github.com (github.com)... 140.82.121.4\n","Connecting to github.com (github.com)|140.82.121.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-releases.githubusercontent.com/299663849/8d26cd00-bbe4-11eb-833a-7b3353c5ae88?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090516Z&X-Amz-Expires=300&X-Amz-Signature=cc4cf20a3ebd223eae9dc20a9ba7f0370863c235770281a8e32bb8b190a4bc77&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DELMO_final_with_broken_rows.zip&response-content-type=application%2Foctet-stream [following]\n","--2021-05-24 09:05:16--  https://github-releases.githubusercontent.com/299663849/8d26cd00-bbe4-11eb-833a-7b3353c5ae88?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090516Z&X-Amz-Expires=300&X-Amz-Signature=cc4cf20a3ebd223eae9dc20a9ba7f0370863c235770281a8e32bb8b190a4bc77&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DELMO_final_with_broken_rows.zip&response-content-type=application%2Foctet-stream\n","Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.108.154, 185.199.111.154, 185.199.110.154, ...\n","Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.108.154|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 3041024 (2.9M) [application/octet-stream]\n","Saving to: ‘ELMO_final_with_broken_rows.zip’\n","\n","ELMO_final_with_bro 100%[===================>]   2.90M  7.21MB/s    in 0.4s    \n","\n","2021-05-24 09:05:17 (7.21 MB/s) - ‘ELMO_final_with_broken_rows.zip’ saved [3041024/3041024]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2q4sc9fUujrI","executionInfo":{"status":"ok","timestamp":1621847300807,"user_tz":-120,"elapsed":383,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["import os\n","import shutil\n","import sys\n","import pandas as pd\n","import numpy as np\n","from tqdm import tqdm\n","import tensorflow as tf\n","from urllib import request\n","import json\n","import tensorflow as tf"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"48-_tfmxeRXX"},"source":["##LOADING THE DATAFRAMEs"]},{"cell_type":"markdown","metadata":{"id":"GPmydva--Idx"},"source":["###Elmo test set with broken rows"]},{"cell_type":"code","metadata":{"id":"SGsObkVFun8e","executionInfo":{"status":"ok","timestamp":1621847118132,"user_tz":-120,"elapsed":47,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["df_elmo_test_broken = pd.read_pickle('/content/ELMO_final_with_broken_rows.zip', compression='zip')\n","df_elmo_test_broken = df_elmo_test_broken.reset_index(drop=True)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":734},"id":"rSzV25VKDkse","executionInfo":{"status":"ok","timestamp":1621847118134,"user_tz":-120,"elapsed":46,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"dc0e1d5a-333b-45fe-9bf0-e15e5b99bcea"},"source":["df_elmo_test_broken.head()"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>context</th>\n","      <th>question</th>\n","      <th>text</th>\n","      <th>answer_list</th>\n","      <th>context_sentences</th>\n","      <th>elmo_answer</th>\n","      <th>question_list</th>\n","      <th>context_list</th>\n","      <th>elmo_answer_list</th>\n","      <th>id</th>\n","      <th>elmo_start</th>\n","      <th>elmo_end</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Genome</td>\n","      <td>in modern molecular biology and genetics the g...</td>\n","      <td>in what fields of science is the genome studied</td>\n","      <td>molecular biology and genetics</td>\n","      <td>[molecular, biology, and, genetics]</td>\n","      <td>[in modern molecular biology and genetics, the...</td>\n","      <td>in modern molecular biology and genetics the g...</td>\n","      <td>[in, what, fields, of, science, is, the, genom...</td>\n","      <td>[in, modern, molecular, biology, and, genetics...</td>\n","      <td>[in, modern, molecular, biology, and, genetics...</td>\n","      <td>56dc544814d3a41400c267bf</td>\n","      <td>2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Genome</td>\n","      <td>in modern molecular biology and genetics the g...</td>\n","      <td>what is the content of the human genome</td>\n","      <td>dna</td>\n","      <td>[dna]</td>\n","      <td>[in modern molecular biology and genetics, the...</td>\n","      <td>in modern molecular biology and genetics the g...</td>\n","      <td>[what, is, the, content, of, the, human, genome]</td>\n","      <td>[in, modern, molecular, biology, and, genetics...</td>\n","      <td>[in, modern, molecular, biology, and, genetics...</td>\n","      <td>56dc544814d3a41400c267c0</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Genome</td>\n","      <td>in modern molecular biology and genetics the g...</td>\n","      <td>what constitutes the viral genome</td>\n","      <td>rna</td>\n","      <td>[rna]</td>\n","      <td>[in modern molecular biology and genetics, the...</td>\n","      <td>the genome includes both the genes and the non...</td>\n","      <td>[what, constitutes, the, viral, genome]</td>\n","      <td>[the, genome, includes, both, the, genes, and,...</td>\n","      <td>[in, modern, molecular, biology, and, genetics...</td>\n","      <td>56dc544814d3a41400c267c1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Genome</td>\n","      <td>the term was created in 1920 by hans winkler p...</td>\n","      <td>who coined the word genome</td>\n","      <td>hans winkler</td>\n","      <td>[hans, winkler]</td>\n","      <td>[the term was created in 1920 by hans winkler,...</td>\n","      <td>the oxford dictionary suggests the name to be ...</td>\n","      <td>[who, coined, the, word, genome]</td>\n","      <td>[the, oxford, dictionary, suggests, the, name,...</td>\n","      <td>[the, term, was, created, in, 1920, by, hans, ...</td>\n","      <td>56dc54a514d3a41400c267c5</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Genome</td>\n","      <td>the term was created in 1920 by hans winkler p...</td>\n","      <td>in what year was the word genome first created</td>\n","      <td>1920</td>\n","      <td>[1920]</td>\n","      <td>[the term was created in 1920 by hans winkler,...</td>\n","      <td>a few related  ome words already existed such ...</td>\n","      <td>[in, what, year, was, the, word, genome, first...</td>\n","      <td>[a, few, related, , ome, words, already, exist...</td>\n","      <td>[the, term, was, created, in, 1920, by, hans, ...</td>\n","      <td>56dc54a514d3a41400c267c6</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    title  ... elmo_end\n","0  Genome  ...        5\n","1  Genome  ...       -1\n","2  Genome  ...       -1\n","3  Genome  ...       -1\n","4  Genome  ...       -1\n","\n","[5 rows x 13 columns]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"we5j66oUh1cr","executionInfo":{"status":"ok","timestamp":1621847118135,"user_tz":-120,"elapsed":31,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"5a191b6c-54ba-4af6-df2d-92ce58bace30"},"source":["df_elmo_test_broken.shape"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7627, 13)"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"zWgvBEVS-DcR"},"source":["###Elmo test set without broken rows"]},{"cell_type":"code","metadata":{"id":"sbTB7A2c9zaZ","executionInfo":{"status":"ok","timestamp":1621847118137,"user_tz":-120,"elapsed":23,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["df_elmo_test_no_broken = pd.read_pickle('/content/ELMO_final_NO_broken_rows.zip', compression='zip')\n","df_elmo_test_no_broken = df_elmo_test_no_broken.reset_index(drop=True)"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":700},"id":"UJ4cJ9Kq9-wf","executionInfo":{"status":"ok","timestamp":1621847118138,"user_tz":-120,"elapsed":23,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"158ec24f-4b5f-4c87-e34b-56cc5806d3cc"},"source":["df_elmo_test_no_broken.head()"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>title</th>\n","      <th>context</th>\n","      <th>question</th>\n","      <th>text</th>\n","      <th>answer_list</th>\n","      <th>context_sentences</th>\n","      <th>elmo_answer</th>\n","      <th>question_list</th>\n","      <th>context_list</th>\n","      <th>elmo_answer_list</th>\n","      <th>id</th>\n","      <th>elmo_start</th>\n","      <th>elmo_end</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Genome</td>\n","      <td>in modern molecular biology and genetics the g...</td>\n","      <td>in what fields of science is the genome studied</td>\n","      <td>molecular biology and genetics</td>\n","      <td>[molecular, biology, and, genetics]</td>\n","      <td>[in modern molecular biology and genetics, the...</td>\n","      <td>in modern molecular biology and genetics the g...</td>\n","      <td>[in, what, fields, of, science, is, the, genom...</td>\n","      <td>[in, modern, molecular, biology, and, genetics...</td>\n","      <td>[in, modern, molecular, biology, and, genetics...</td>\n","      <td>56dc544814d3a41400c267bf</td>\n","      <td>2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Genome</td>\n","      <td>the term was created in 1920 by hans winkler p...</td>\n","      <td>at what university was hans winkler employed w...</td>\n","      <td>university of hamburg</td>\n","      <td>[university, of, hamburg]</td>\n","      <td>[the term was created in 1920 by hans winkler,...</td>\n","      <td>the term was created in 1920 by hans winkler p...</td>\n","      <td>[at, what, university, was, hans, winkler, emp...</td>\n","      <td>[the, term, was, created, in, 1920, by, hans, ...</td>\n","      <td>[the, term, was, created, in, 1920, by, hans, ...</td>\n","      <td>56dc54a514d3a41400c267c7</td>\n","      <td>14</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Genome</td>\n","      <td>some organisms have multiple copies of chromos...</td>\n","      <td>a gamate has how many chromosomes relative to ...</td>\n","      <td>half</td>\n","      <td>[half]</td>\n","      <td>[some organisms have multiple copies of chromo...</td>\n","      <td>the gamete has half the number of chromosomes ...</td>\n","      <td>[a, gamate, has, how, many, chromosomes, relat...</td>\n","      <td>[the, gamete, has, half, the, number, of, chro...</td>\n","      <td>[some, organisms, have, multiple, copies, of, ...</td>\n","      <td>56dc552f14d3a41400c267cd</td>\n","      <td>3</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Genome</td>\n","      <td>some organisms have multiple copies of chromos...</td>\n","      <td>what process splits the chromosome between gam...</td>\n","      <td>meiosis</td>\n","      <td>[meiosis]</td>\n","      <td>[some organisms have multiple copies of chromo...</td>\n","      <td>the halving of the genetic material in gametes...</td>\n","      <td>[what, process, splits, the, chromosome, betwe...</td>\n","      <td>[the, halving, of, the, genetic, material, in,...</td>\n","      <td>[some, organisms, have, multiple, copies, of, ...</td>\n","      <td>56dc552f14d3a41400c267ce</td>\n","      <td>17</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Genome</td>\n","      <td>when people say that the genome of a sexually ...</td>\n","      <td>what is the science that deals with the common...</td>\n","      <td>genomics</td>\n","      <td>[genomics]</td>\n","      <td>[when people say that the genome of a sexually...</td>\n","      <td>the study of the global properties of genomes ...</td>\n","      <td>[what, is, the, science, that, deals, with, th...</td>\n","      <td>[the, study, of, the, global, properties, of, ...</td>\n","      <td>[when, people, say, that, the, genome, of, a, ...</td>\n","      <td>56dc561414d3a41400c267d3</td>\n","      <td>16</td>\n","      <td>16</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    title  ... elmo_end\n","0  Genome  ...        5\n","1  Genome  ...       16\n","2  Genome  ...        3\n","3  Genome  ...       17\n","4  Genome  ...       16\n","\n","[5 rows x 13 columns]"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"ay2XfE5HDLFe"},"source":["###LOADING THE VOCABULARIES"]},{"cell_type":"code","metadata":{"id":"Rf9i-1DRdFR9","executionInfo":{"status":"ok","timestamp":1621847118677,"user_tz":-120,"elapsed":560,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["glove_idx_to_word = {}\n","glove_word_to_idx = {}\n","trainable_idx_to_word = {}\n","trainable_word_to_idx = {}\n","\n","with open('./NLP/vocabularies/1_2_3_initialmodels/glove/idx_to_word.json') as f:\n","    glove_idx_to_word = json.load(f)\n","with open('./NLP/vocabularies/1_2_3_initialmodels/glove/word_to_idx.json') as f:\n","    glove_word_to_idx = json.load(f)\n","with open('./NLP/vocabularies/1_2_3_initialmodels/trainable/idx_to_word.json') as f:\n","    trainable_idx_to_word = json.load(f)\n","with open('./NLP/vocabularies/1_2_3_initialmodels/trainable/word_to_idx.json') as f:\n","    trainable_word_to_idx = json.load(f)"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CY3u2D8beG00"},"source":["##FINDING OOV_TERMS"]},{"cell_type":"markdown","metadata":{"id":"NR2H0g7t-jeM"},"source":["###We use the larger dataset for the OOV Terms"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MhsTYCWuPtxF","executionInfo":{"status":"ok","timestamp":1621847168328,"user_tz":-120,"elapsed":49677,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"708026d9-03aa-4257-e11c-7731da5860a8"},"source":["from pandas.core.common import flatten\n","\n","corpus = list(flatten(df_elmo_test_broken['question_list']))\n","corpus += list(flatten(df_elmo_test_broken['elmo_answer_list']))\n","corpus = set(corpus)\n","glove_oovterms = [term for term in corpus if term not in list(glove_word_to_idx.keys())]\n","trainable_oovterms = [term for term in corpus if term not in list(trainable_word_to_idx.keys())]\n","\n","print(\"GLOVE - THERE ARE {} OUT-OF-VOCABULARY TERMS: {:.1f}% OF THE TEST SET'S TERMS\".format(len(glove_oovterms), len(glove_oovterms)/len(corpus)*100))\n","print(\"TRAINABLE - THERE ARE {} OUT-OF-VOCABULARY TERMS: {:.1f}% OF THE TEST SET'S TERMS\".format(len(trainable_oovterms), len(trainable_oovterms)/len(corpus)*100))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["GLOVE - THERE ARE 1981 OUT-OF-VOCABULARY TERMS: 9.0% OF THE TEST SET'S TERMS\n","TRAINABLE - THERE ARE 1981 OUT-OF-VOCABULARY TERMS: 9.0% OF THE TEST SET'S TERMS\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"WC3_X2KyAVky"},"source":["##PREDICTING WITH THE GLOVE MODELS"]},{"cell_type":"markdown","metadata":{"id":"UMh5Nb9c-obb"},"source":["###ENCODING TEST SET"]},{"cell_type":"code","metadata":{"id":"L9tlR5gYPx7C"},"source":["# ENCODING OF THE TEST SET (WHOLE SET AT ONE TIME)\n","    # CONTEXT_LIST => EACH ELEMENT ENCODED AS ITS VOCABULARY'S INDEX\n","    # QUESTION_LIST => EACH ELEMENT ENCODED AS ITS VOCABULARY'S INDEX\n","\n","def encode(df, idx_to_word, word_to_idx, oov):\n","    contexts = []\n","    questions  = []\n","    \n","    for i, row in df.iterrows():\n","    #COLUMN NAMES : question_list, elmo_answer_list\n","        # QUESTIONS EMBEDDING\n","        question = []\n","        # formatting single question\n","        for word in row['question_list']: \n","          if word in oov:\n","            question.append(word_to_idx['OOV'])\n","          else:\n","            question.append(word_to_idx[word])\n","        # adding it to the questions' column\n","        questions.append(question)\n","        \n","        # CONTEXTS EMBEDDING\n","        context = []\n","        # formatting single context \n","        for word in row['elmo_answer_list']:\n","          if word in oov:\n","            context.append(word_to_idx['OOV'])\n","          else:\n","            context.append(word_to_idx[word])\n","        # adding it to the contexts' column\n","        contexts.append(context)\n","    \n","    contexts = tf.keras.preprocessing.sequence.pad_sequences(contexts, dtype=\"float32\", padding=\"post\")\n","    questions = tf.keras.preprocessing.sequence.pad_sequences(questions, dtype=\"float32\", padding=\"post\")\n","    \n","    return (questions, contexts)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t_JFuAlY_1k6"},"source":["###Elmo broken rows"]},{"cell_type":"code","metadata":{"id":"_HiEdbHiPzdj"},"source":["df_ENCGlove_BROKEN = encode(df_elmo_test_broken, glove_idx_to_word, glove_word_to_idx, glove_oovterms)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-6wYlExU_4rs"},"source":["###Elmo no broken rows"]},{"cell_type":"code","metadata":{"id":"ZQ0LHkl7_7M-"},"source":["df_ENCGlove_NO_BROKEN = encode(df_elmo_test_no_broken, glove_idx_to_word, glove_word_to_idx, glove_oovterms)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Exr1-ubKBAR6"},"source":["###GLOVE MODEL1\n","  - GLOVE EMBEDDINGS\n","  - ATTENTION LAYER\n","  - BATCH SIZE 256\n","  - REDUCIBLE LEARNING RATE (0.01-0.001)"]},{"cell_type":"code","metadata":{"id":"Vml78KfrVfmf"},"source":["from tensorflow.keras.models import load_model\n","\n","# Path where the model is saved\n","glove_model1_attention = os.path.join(\"model1_attention.h5\")\n","\n","# Uploading the weights\n","glove_model1 = load_model(glove_model1_attention)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3D5-ULuF--V6"},"source":["####PREDICT for ELMO WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"sSNqKGM8QV9v"},"source":["glove_pred1 = glove_model1.predict(df_ENCGlove_BROKEN, verbose=0)\n","glove_pred1 = list(zip(glove_pred1[0], glove_pred1[1]))\n","glove_predidxs1 = np.argmax(glove_pred1, axis=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aKKqJmPhQZ8x","executionInfo":{"status":"ok","timestamp":1621787076958,"user_tz":-120,"elapsed":313,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"51f5e620-9fa3-4fb6-f97c-7d6a5690e870"},"source":["well_formed = 0\n","for el in glove_predidxs1:\n","  if el[0]<=el[1]:\n","    well_formed += 1\n","\n","print(\"WELL FORMED PREDICTIONS ARE {}, {:.1f}%\".format(well_formed, well_formed/len(df_elmo_test_broken)*100))\n","print(\"EMPTY ANSWERS WILL BE {}, {:.1f}%\".format(len(df_elmo_test_broken)-well_formed, 100-well_formed/len(df_elmo_test_broken)*100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WELL FORMED PREDICTIONS ARE 6951, 91.1%\n","EMPTY ANSWERS WILL BE 676, 8.9%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fV3kF9cb_oQw"},"source":["####ANSWER EXTRACTION\n","FROM THE PREDICTED INDEXES TO THE CORRESPONDENT SLICE OF CONTEXT LIST\n","\n","FROM SLICE OF LIST TO SINGLE STRING"]},{"cell_type":"code","metadata":{"id":"C7MgMxz43u3A"},"source":["glove_finalpred1 = {}\n","\n","for i in range(len(df_elmo_test_broken)):\n","    answer = df_elmo_test_broken['elmo_answer_list'][i][glove_predidxs1[i][0]: glove_predidxs1[i][1]+1]  \n","    glove_finalpred1[df_elmo_test_broken['id'][i]] = ' '.join(answer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PBBJ06mP46TQ","executionInfo":{"status":"ok","timestamp":1621787102180,"user_tz":-120,"elapsed":520,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"e9c92070-a05e-4d85-c817-905315a56301"},"source":["#SHOWING SOME EXAMPLES\n","for key in list(glove_finalpred1.keys())[:5]:\n","    print(key, glove_finalpred1[key])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["56dc544814d3a41400c267bf modern molecular biology\n","56dc544814d3a41400c267c0 genetic material\n","56dc544814d3a41400c267c1 the genome\n","56dc54a514d3a41400c267c5 hans winkler\n","56dc54a514d3a41400c267c6 1920\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HeBpDTXHKg0o"},"source":["####SAVING PREDICTED ANSWER IN A JSON FILE"]},{"cell_type":"code","metadata":{"id":"0T4ZI51T7hpd"},"source":["# convert into JSON:\n","with open('ELMO_BROKEN_glove_predictions_model1_attention.json', 'w') as outfile:\n","  json.dump(glove_finalpred1, outfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KB9DuqoJC6rw"},"source":["####PREDICT for ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"-LTcoVAbC_Jd"},"source":["glove_pred1 = glove_model1.predict(df_ENCGlove_NO_BROKEN, verbose=0)\n","glove_pred1 = list(zip(glove_pred1[0], glove_pred1[1]))\n","glove_predidxs1 = np.argmax(glove_pred1, axis=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5f4208moDeyB","executionInfo":{"status":"ok","timestamp":1621787392232,"user_tz":-120,"elapsed":6,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"6eb54e4c-e092-43e8-e2d4-b2908add2fcb"},"source":["well_formed = 0\n","for el in glove_predidxs1:\n","  if el[0]<=el[1]:\n","    well_formed += 1\n","\n","print(\"WELL FORMED PREDICTIONS ARE {}, {:.1f}%\".format(well_formed, well_formed/len(df_elmo_test_no_broken)*100))\n","print(\"EMPTY ANSWERS WILL BE {}, {:.1f}%\".format(len(df_elmo_test_no_broken)-well_formed, 100-well_formed/len(df_elmo_test_no_broken)*100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WELL FORMED PREDICTIONS ARE 3861, 92.1%\n","EMPTY ANSWERS WILL BE 332, 7.9%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5YG8s5u4DAGT"},"source":["####ANSWER EXTRACTION"]},{"cell_type":"code","metadata":{"id":"f2SYJX0MDD26"},"source":["glove_finalpred1 = {}\n","\n","for i in range(len(df_elmo_test_no_broken)):\n","    answer = df_elmo_test_no_broken['elmo_answer_list'][i][glove_predidxs1[i][0]: glove_predidxs1[i][1]+1]  \n","    glove_finalpred1[df_elmo_test_no_broken['id'][i]] = ' '.join(answer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UFu7rgm5Dlpz","executionInfo":{"status":"ok","timestamp":1621787403824,"user_tz":-120,"elapsed":416,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"12241930-869d-4caa-e8fe-2fb780a2d089"},"source":["#SHOWING SOME EXAMPLES\n","for key in list(glove_finalpred1.keys())[:5]:\n","    print(key, glove_finalpred1[key])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["56dc544814d3a41400c267bf modern molecular biology\n","56dc54a514d3a41400c267c7 \n","56dc552f14d3a41400c267cd half\n","56dc552f14d3a41400c267ce eukarya\n","56dc561414d3a41400c267d3 genomics\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Q6Wgxyd3DEQi"},"source":["####SAVING PREDICTED ANSWER IN A JSON FILE"]},{"cell_type":"code","metadata":{"id":"fV80-b2iDZ2j"},"source":["# convert into JSON:\n","with open('ELMO_NO_BROKEN_glove_predictions_model1_attention.json', 'w') as outfile:\n","  json.dump(glove_finalpred1, outfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4MHkrJGSENBJ"},"source":["###GLOVE MODEL2\n","  - GLOVE EMBEDDINGS\n","  - ADDITIVE ATTENTION LAYER\n","  - BATCH SIZE 256\n","  - FIXED LEARNING RATE (0.001)"]},{"cell_type":"code","metadata":{"id":"4l7TQ3YpENBR"},"source":["from tensorflow.keras.models import load_model\n","\n","# Path where the model is saved\n","glove_model2_additive = os.path.join(\"model2_additiveattention.h5\")\n","\n","# Uploading the weights\n","glove_model2 = load_model(glove_model2_additive)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"33ChZEebENBQ"},"source":["####PREDICT for ELMO WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"Gio_PhXJENBS"},"source":["glove_pred2 = glove_model2.predict(df_ENCGlove_BROKEN, verbose=0)\n","glove_pred2 = list(zip(glove_pred2[0], glove_pred2[1]))\n","glove_predidxs2 = np.argmax(glove_pred2, axis=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cOdnpxW6ENBS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621787541656,"user_tz":-120,"elapsed":5,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"4a0c9044-55af-4ee4-e3c3-d4bbd71d028d"},"source":["well_formed = 0\n","for el in glove_predidxs2:\n","  if el[0]<=el[1]:\n","    well_formed += 1\n","\n","print(\"WELL FORMED PREDICTIONS ARE {}, {:.1f}%\".format(well_formed, well_formed/len(df_elmo_test_broken)*100))\n","print(\"EMPTY ANSWERS WILL BE {}, {:.1f}%\".format(len(df_elmo_test_broken)-well_formed, 100-well_formed/len(df_elmo_test_broken)*100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WELL FORMED PREDICTIONS ARE 6785, 89.0%\n","EMPTY ANSWERS WILL BE 842, 11.0%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FKBV3RxIENBT"},"source":["\n","####ANSWER EXTRACTION\n","FROM THE PREDICTED INDEXES TO THE CORRESPONDENT SLICE OF CONTEXT LIST\n","\n","FROM SLICE OF LIST TO SINGLE STRING"]},{"cell_type":"code","metadata":{"id":"YGD3JzH_ENBU"},"source":["glove_finalpred2 = {}\n","\n","for i in range(len(df_elmo_test_broken)):\n","    answer = df_elmo_test_broken['elmo_answer_list'][i][glove_predidxs2[i][0]: glove_predidxs2[i][1]+1]  \n","    glove_finalpred2[df_elmo_test_broken['id'][i]] = ' '.join(answer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Hd9ZBSkZENBU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621787553528,"user_tz":-120,"elapsed":406,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"a3f56f4c-e1bf-4689-d398-4459f9b73ffe"},"source":["#SHOWING SOME EXAMPLES\n","for key in list(glove_finalpred2.keys())[:5]:\n","    print(key, glove_finalpred2[key])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["56dc544814d3a41400c267bf genetics\n","56dc544814d3a41400c267c0 the genetic material of an organism\n","56dc544814d3a41400c267c1 the genetic material of an organism\n","56dc54a514d3a41400c267c5 hans winkler\n","56dc54a514d3a41400c267c6 1920\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4nS8XjMyENBV"},"source":["####SAVING PREDICTED ANSWER IN A JSON FILE"]},{"cell_type":"code","metadata":{"id":"bDdL-caDENBV"},"source":["# convert into JSON:\n","with open('ELMO_BROKEN_glove_predictions_model2_additive.json', 'w') as outfile:\n","  json.dump(glove_finalpred2, outfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ij-XUhCOEqvk"},"source":["####PREDICT for ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"2wow4erhErlK"},"source":["glove_pred2 = glove_model2.predict(df_ENCGlove_NO_BROKEN, verbose=0)\n","glove_pred2 = list(zip(glove_pred2[0], glove_pred2[1]))\n","glove_predidxs2 = np.argmax(glove_pred2, axis=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kozgIc7nE-ja","executionInfo":{"status":"ok","timestamp":1621787764998,"user_tz":-120,"elapsed":310,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"e0c824dc-ae85-4d69-b100-f957f1401872"},"source":["well_formed = 0\n","for el in glove_predidxs2:\n","  if el[0]<=el[1]:\n","    well_formed += 1\n","\n","print(\"WELL FORMED PREDICTIONS ARE {}, {:.1f}%\".format(well_formed, well_formed/len(df_elmo_test_no_broken)*100))\n","print(\"EMPTY ANSWERS WILL BE {}, {:.1f}%\".format(len(df_elmo_test_no_broken)-well_formed, 100-well_formed/len(df_elmo_test_no_broken)*100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WELL FORMED PREDICTIONS ARE 3745, 89.3%\n","EMPTY ANSWERS WILL BE 448, 10.7%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mB4XwdPgEsqo"},"source":["####ANSWER EXTRACTION"]},{"cell_type":"code","metadata":{"id":"tP-mStx_Et7K"},"source":["glove_finalpred2 = {}\n","\n","for i in range(len(df_elmo_test_no_broken)):\n","    answer = df_elmo_test_no_broken['elmo_answer_list'][i][glove_predidxs2[i][0]: glove_predidxs2[i][1]+1]  \n","    glove_finalpred2[df_elmo_test_no_broken['id'][i]] = ' '.join(answer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0e16nm6bFFPs","executionInfo":{"status":"ok","timestamp":1621787789781,"user_tz":-120,"elapsed":516,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"40c01944-c76c-4e2c-9fd0-012ebc6d459f"},"source":["#SHOWING SOME EXAMPLES\n","for key in list(glove_finalpred2.keys())[:5]:\n","    print(key, glove_finalpred2[key])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["56dc544814d3a41400c267bf genetics\n","56dc54a514d3a41400c267c7 university\n","56dc552f14d3a41400c267cd \n","56dc552f14d3a41400c267ce homologous chromosomes\n","56dc561414d3a41400c267d3 genomics\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2JmyisAHEunF"},"source":["####SAVING PREDICTED ANSWER IN A JSON FILE"]},{"cell_type":"code","metadata":{"id":"owxF1xy2EvIG"},"source":["# convert into JSON:\n","with open('ELMO_NO_BROKEN_glove_predictions_model2_additive.json', 'w') as outfile:\n","  json.dump(glove_finalpred2, outfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sBbrUQCHch52"},"source":["###GLOVE EXPERIMENT4\n","- ATTENTION LAYER\n","- REDUCIBLE LEARNING RATE (0.01-0.001)\n","- BATCH SIZE 256\n","- LSTM'S DROP-OUT=0.2"]},{"cell_type":"code","metadata":{"id":"5xQfyFCcch6G"},"source":["from tensorflow.keras.models import load_model\n","\n","# Path where the model is saved\n","glove_experiment4 = os.path.join(\"experiment4.h5\")\n","\n","# Uploading the weights\n","glove_model3 = load_model(glove_experiment4)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JRlxjcb9ch6F"},"source":["####PREDICT for ELMO WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"Gc2QQw3Kch6G"},"source":["glove_pred3 = glove_model3.predict(df_ENCGlove_BROKEN, verbose=0)\n","glove_pred3 = list(zip(glove_pred3[0], glove_pred3[1]))\n","glove_predidxs3 = np.argmax(glove_pred3, axis=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8JCBSKIVch6H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621787933560,"user_tz":-120,"elapsed":326,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"41d04e4c-74de-41e0-976e-81bc1933050c"},"source":["well_formed = 0\n","for el in glove_predidxs3:\n","  if el[0]<=el[1]:\n","    well_formed += 1\n","\n","print(\"WELL FORMED PREDICTIONS ARE {}, {:.1f}%\".format(well_formed, well_formed/len(df_elmo_test_broken)*100))\n","print(\"EMPTY ANSWERS WILL BE {}, {:.1f}%\".format(len(df_elmo_test_broken)-well_formed, 100-well_formed/len(df_elmo_test_broken)*100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WELL FORMED PREDICTIONS ARE 7188, 94.2%\n","EMPTY ANSWERS WILL BE 439, 5.8%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_LP647mlch6I"},"source":["####ANSWER EXTRACTION\n","FROM THE PREDICTED INDEXES TO THE CORRESPONDENT SLICE OF CONTEXT LIST\n","\n","FROM SLICE OF LIST TO SINGLE STRING"]},{"cell_type":"code","metadata":{"id":"jEb90JTZch6I"},"source":["glove_finalpred3 = {}\n","\n","for i in range(len(df_elmo_test_broken)):\n","    answer = df_elmo_test_broken['elmo_answer_list'][i][glove_predidxs3[i][0]: glove_predidxs3[i][1]+1]  \n","    glove_finalpred3[df_elmo_test_broken['id'][i]] = ' '.join(answer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K9UWZAgSch6I","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621787950360,"user_tz":-120,"elapsed":322,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"0b9a2c63-159d-47e9-9731-f15c8d1ea8f3"},"source":["#SHOWING SOME EXAMPLES\n","for key in list(glove_finalpred3.keys())[:5]:\n","    print(key, glove_finalpred3[key])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["56dc544814d3a41400c267bf modern molecular biology and genetics\n","56dc544814d3a41400c267c0 genetic material of an organism it consists of dna or rna in rna viruses the genome includes both the genes and the non coding sequences of the dnarna\n","56dc544814d3a41400c267c1 rna viruses\n","56dc54a514d3a41400c267c5 hans winkler professor of botany\n","56dc54a514d3a41400c267c6 1920\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"j0B2yX4pch6J"},"source":["####SAVING PREDICTED ANSWER IN A JSON FILE"]},{"cell_type":"code","metadata":{"id":"etB3BPHOch6J"},"source":["# convert into JSON:\n","with open('ELMO_BROKEN_glove_predictions_experiment4.json', 'w') as outfile:\n","  json.dump(glove_finalpred3, outfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dYZdB7QoGPV_"},"source":["####PREDICT for ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"9PeFPRtCGP1e"},"source":["glove_pred3 = glove_model3.predict(df_ENCGlove_NO_BROKEN, verbose=0)\n","glove_pred3 = list(zip(glove_pred3[0], glove_pred3[1]))\n","glove_predidxs3 = np.argmax(glove_pred3, axis=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zNVnLUSTGQLD","executionInfo":{"status":"ok","timestamp":1621788132993,"user_tz":-120,"elapsed":478,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"ef8fb084-1a0b-4a53-f1a6-f408a3272024"},"source":["well_formed = 0\n","for el in glove_predidxs3:\n","  if el[0]<=el[1]:\n","    well_formed += 1\n","\n","print(\"WELL FORMED PREDICTIONS ARE {}, {:.1f}%\".format(well_formed, well_formed/len(df_elmo_test_no_broken)*100))\n","print(\"EMPTY ANSWERS WILL BE {}, {:.1f}%\".format(len(df_elmo_test_no_broken)-well_formed, 100-well_formed/len(df_elmo_test_no_broken)*100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WELL FORMED PREDICTIONS ARE 3978, 94.9%\n","EMPTY ANSWERS WILL BE 215, 5.1%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fAL5OfL6GQjP"},"source":["####ANSWER EXTRACTION"]},{"cell_type":"code","metadata":{"id":"tKgX6vF1GRD3"},"source":["glove_finalpred3 = {}\n","\n","for i in range(len(df_elmo_test_no_broken)):\n","    answer = df_elmo_test_no_broken['elmo_answer_list'][i][glove_predidxs3[i][0]: glove_predidxs3[i][1]+1]  \n","    glove_finalpred3[df_elmo_test_no_broken['id'][i]] = ' '.join(answer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7KDcd5SxGRbB","executionInfo":{"status":"ok","timestamp":1621788142513,"user_tz":-120,"elapsed":1032,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"ee6e3c39-c014-4ee3-9d05-31733bf09fa7"},"source":["#SHOWING SOME EXAMPLES\n","for key in list(glove_finalpred3.keys())[:5]:\n","    print(key, glove_finalpred3[key])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["56dc544814d3a41400c267bf modern molecular biology and genetics\n","56dc54a514d3a41400c267c7 university of hamburg germany\n","56dc552f14d3a41400c267cd half\n","56dc552f14d3a41400c267ce homologous chromosomes\n","56dc561414d3a41400c267d3 genomics\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Uaksi130GR17"},"source":["####SAVING PREDICTED ANSWER IN A JSON FILE"]},{"cell_type":"code","metadata":{"id":"iKec21niGSUI"},"source":["# convert into JSON:\n","with open('ELMO_NO_BROKEN_glove_predictions_experiment4.json', 'w') as outfile:\n","  json.dump(glove_finalpred3, outfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7KSrnhIvA3kG"},"source":["##PREDICTING WITH THE TRAINABLE MODEL\n","  - TRAINABLE EMBEDDINGS\n","  - MULTIHEAD ATTENTION LAYER\n","  - BATCH SIZE OF 256\n","  - REDUCIBLE LEARNING RATE (0.01-0.001)"]},{"cell_type":"markdown","metadata":{"id":"fPUOkqAuA3kX"},"source":["###ENCODING TEST SET"]},{"cell_type":"code","metadata":{"id":"UX_IPNnEA3kZ"},"source":["df_trainableENC_BROKEN = encode(df_elmo_test_broken, trainable_idx_to_word, trainable_word_to_idx, trainable_oovterms)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wftLer1QHCf-"},"source":["df_trainableENC_NO_BROKEN = encode(df_elmo_test_no_broken, trainable_idx_to_word, trainable_word_to_idx, trainable_oovterms)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7hgnjr-cA3kd"},"source":["import tensorflow as tf\n","from tensorflow.keras.models import load_model\n","\n","# Path where the model is saved\n","trainable_model1_multihead = os.path.join(\"model1_multiheadattention.h5\")\n","\n","# Uploading the weights\n","trainable_model = load_model(trainable_model1_multihead)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h2IpQgHCA3kc"},"source":["###PREDICT for ELMO WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"rFldKw2pA3kd"},"source":["trainable_pred = trainable_model.predict(df_trainableENC_BROKEN, verbose=0)\n","trainable_pred = list(zip(trainable_pred[0], trainable_pred[1]))\n","trainable_predidxs = np.argmax(trainable_pred, axis=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QThjEo4LA3ke","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621788327489,"user_tz":-120,"elapsed":412,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"a6bced95-bc97-4b2f-9823-4344ecba2e5c"},"source":["well_formed = 0\n","for el in trainable_predidxs:\n","  if el[0]<=el[1]:\n","    well_formed += 1\n","\n","print(\"WELL FORMED PREDICTIONS ARE {}, {:.1f}%\".format(well_formed, well_formed/len(df_elmo_test_broken)*100))\n","print(\"EMPTY ANSWERS WILL BE {}, {:.1f}%\".format(len(df_elmo_test_broken)-well_formed, 100-well_formed/len(df_elmo_test_broken)*100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WELL FORMED PREDICTIONS ARE 6580, 86.3%\n","EMPTY ANSWERS WILL BE 1047, 13.7%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hPE4E-eYA3kg"},"source":["###ANSWER EXTRACTION\n","FROM THE PREDICTED INDEXES TO THE CORRESPONDENT SLICE OF CONTEXT LIST\n","\n","FROM SLICE OF LIST TO SINGLE STRING"]},{"cell_type":"code","metadata":{"id":"2QtaRVuhA3kh"},"source":["trainable_finalpred = {}\n","\n","for i in range(len(df_elmo_test_broken)):\n","    answer = df_elmo_test_broken['elmo_answer_list'][i][trainable_predidxs[i][0]: trainable_predidxs[i][1]+1]  \n","    trainable_finalpred[df_elmo_test_broken['id'][i]] = ' '.join(answer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LjrjVJ3LA3kh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621788342763,"user_tz":-120,"elapsed":323,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"406b9d6e-6323-4bdf-f054-696ce5051038"},"source":["#SHOWING SOME EXAMPLES\n","for key in list(trainable_finalpred.keys())[:5]:\n","    print(key, trainable_finalpred[key])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["56dc544814d3a41400c267bf non coding sequences of the dnarna\n","56dc544814d3a41400c267c0 the non coding sequences of the dnarna\n","56dc544814d3a41400c267c1 the dnarna\n","56dc54a514d3a41400c267c5 rhizome\n","56dc54a514d3a41400c267c6 1920\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JZ0JBLr6AJ-S"},"source":["###SAVING PREDICTED ANSWER IN A JSON FILE"]},{"cell_type":"code","metadata":{"id":"mpJSz_Fi8Xtd"},"source":["# convert into JSON:\n","with open('ELMO_BROKEN_trainable_predictions_model1_multihead.json', 'w') as outfile:\n","  json.dump(trainable_finalpred, outfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y1LLoXXNHqYg"},"source":["####PREDICT for ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"j6ongFm0Hqz-"},"source":["trainable_pred = trainable_model.predict(df_trainableENC_NO_BROKEN, verbose=0)\n","trainable_pred = list(zip(trainable_pred[0], trainable_pred[1]))\n","trainable_predidxs = np.argmax(trainable_pred, axis=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WcSdglpvHrNk","executionInfo":{"status":"ok","timestamp":1621788532775,"user_tz":-120,"elapsed":856,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"066210d3-4c82-47fc-b4b3-a1a91c13ee04"},"source":["well_formed = 0\n","for el in trainable_predidxs:\n","  if el[0]<=el[1]:\n","    well_formed += 1\n","\n","print(\"WELL FORMED PREDICTIONS ARE {}, {:.1f}%\".format(well_formed, well_formed/len(df_elmo_test_no_broken)*100))\n","print(\"EMPTY ANSWERS WILL BE {}, {:.1f}%\".format(len(df_elmo_test_no_broken)-well_formed, 100-well_formed/len(df_elmo_test_no_broken)*100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WELL FORMED PREDICTIONS ARE 3591, 85.6%\n","EMPTY ANSWERS WILL BE 602, 14.4%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"u_OyZa-qHrhv"},"source":["###ANSWER EXTRACTION"]},{"cell_type":"code","metadata":{"id":"K0Wh2t5-Hr9X"},"source":["trainable_finalpred = {}\n","\n","for i in range(len(df_elmo_test_no_broken)):\n","    answer = df_elmo_test_no_broken['elmo_answer_list'][i][trainable_predidxs[i][0]: trainable_predidxs[i][1]+1]  \n","    trainable_finalpred[df_elmo_test_no_broken['id'][i]] = ' '.join(answer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i7wgdgvbHsXO","executionInfo":{"status":"ok","timestamp":1621788548718,"user_tz":-120,"elapsed":550,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"ca45866d-ed2e-4c53-a366-20e5fd9d4479"},"source":["#SHOWING SOME EXAMPLES\n","for key in list(trainable_finalpred.keys())[:5]:\n","    print(key, trainable_finalpred[key])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["56dc544814d3a41400c267bf non coding sequences of the dnarna\n","56dc54a514d3a41400c267c7 university of hamburg germany\n","56dc552f14d3a41400c267cd homologous\n","56dc552f14d3a41400c267ce mitochondria\n","56dc561414d3a41400c267d3 autosomes and one of each type of sex chromosome\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SNX4tQpsHsvl"},"source":["###SAVING PREDICTED ANSWER IN A JSON FILE"]},{"cell_type":"code","metadata":{"id":"rrtdefnBHtNg"},"source":["# convert into JSON:\n","with open('ELMO_NO_BROKEN_trainable_predictions_model1_multihead.json', 'w') as outfile:\n","  json.dump(trainable_finalpred, outfile)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uSH2E_Xf03UN"},"source":["##EVALUATIONS\n","\n"]},{"cell_type":"markdown","metadata":{"id":"uRwHYh5iHwL6"},"source":["### GLOVE MODEL1"]},{"cell_type":"markdown","metadata":{"id":"0ZEyPshvIdwt"},"source":["####ELMO WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"52MNM9SkJz4b","executionInfo":{"status":"ok","timestamp":1621788855146,"user_tz":-120,"elapsed":1177,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"4bb47e82-3fd9-4150-f8b6-a3f6f9955d5c"},"source":["!python /content/NLP/evaluate.py /content/ELMO_final_with_broken_rows.json /content/ELMO_BROKEN_glove_predictions_model1_attention.json"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 28.5826668414842,\n","  \"f1\": 40.798676907319184,\n","  \"total\": 7627,\n","  \"HasAns_exact\": 28.5826668414842,\n","  \"HasAns_f1\": 40.798676907319184,\n","  \"HasAns_total\": 7627\n","}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MOdJ8PffJEee"},"source":["#### ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BTRqfTWAJNwu","executionInfo":{"status":"ok","timestamp":1621788901406,"user_tz":-120,"elapsed":801,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"67d91342-74f3-4372-ca2f-2058906dc467"},"source":["!python /content/NLP/evaluate.py /content/ELMO_final_NO_broken_rows.json /content/ELMO_NO_BROKEN_glove_predictions_model1_attention.json"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 32.959694729310755,\n","  \"f1\": 44.33343857182568,\n","  \"total\": 4193,\n","  \"HasAns_exact\": 32.959694729310755,\n","  \"HasAns_f1\": 44.33343857182568,\n","  \"HasAns_total\": 4193\n","}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hQCvf_PZH2yc"},"source":["### GLOVE MODEL2"]},{"cell_type":"markdown","metadata":{"id":"cgcEZA5YJ2Vh"},"source":["####ELMO WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KolHJovKGYmQ","executionInfo":{"status":"ok","timestamp":1621789000438,"user_tz":-120,"elapsed":1230,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"dcb71f9a-84f1-45ad-df10-efedb438a0dd"},"source":["!python /content/NLP/evaluate.py /content/ELMO_final_with_broken_rows.json /content/ELMO_BROKEN_glove_predictions_model2_additive.json"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 25.9472925134391,\n","  \"f1\": 39.542039978059094,\n","  \"total\": 7627,\n","  \"HasAns_exact\": 25.9472925134391,\n","  \"HasAns_f1\": 39.542039978059094,\n","  \"HasAns_total\": 7627\n","}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VVYGeemjJ3ZU"},"source":["####ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RQRPr7RXJ5N1","executionInfo":{"status":"ok","timestamp":1621789017729,"user_tz":-120,"elapsed":705,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"2fc1640f-3aab-4568-9249-46eaac6bca44"},"source":["!python /content/NLP/evaluate.py /content/ELMO_final_NO_broken_rows.json /content/ELMO_NO_BROKEN_glove_predictions_model2_additive.json"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 30.12163129024565,\n","  \"f1\": 43.06795707754052,\n","  \"total\": 4193,\n","  \"HasAns_exact\": 30.12163129024565,\n","  \"HasAns_f1\": 43.06795707754052,\n","  \"HasAns_total\": 4193\n","}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9F5Owu_gdkRo"},"source":["### GLOVE EXPERIMENT4"]},{"cell_type":"markdown","metadata":{"id":"q7Xb4Za4KNwL"},"source":["####ELMO WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o4jlc7GldkRq","executionInfo":{"status":"ok","timestamp":1621789088369,"user_tz":-120,"elapsed":684,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"dc05d5f1-31e2-4138-a9c7-788ff9899086"},"source":["!python /content/NLP/evaluate.py /content/ELMO_final_with_broken_rows.json /content/ELMO_BROKEN_glove_predictions_experiment4.json"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 41.10397272846466,\n","  \"f1\": 57.67902766437532,\n","  \"total\": 7627,\n","  \"HasAns_exact\": 41.10397272846466,\n","  \"HasAns_f1\": 57.67902766437532,\n","  \"HasAns_total\": 7627\n","}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7pVw2RJMKPHH"},"source":["####ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GYIJaR5WKTTy","executionInfo":{"status":"ok","timestamp":1621789107008,"user_tz":-120,"elapsed":794,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"a531458e-3f93-4fa1-e7da-410374242af4"},"source":["!python /content/NLP/evaluate.py /content/ELMO_final_NO_broken_rows.json /content/ELMO_NO_BROKEN_glove_predictions_experiment4.json"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 48.67636537085619,\n","  \"f1\": 64.29007925345275,\n","  \"total\": 4193,\n","  \"HasAns_exact\": 48.67636537085619,\n","  \"HasAns_f1\": 64.29007925345275,\n","  \"HasAns_total\": 4193\n","}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_MgP_W7mH34c"},"source":["### TRAINABLE MODEL"]},{"cell_type":"markdown","metadata":{"id":"Y-6JDKUTKksb"},"source":["####ELMO WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4K6nkdG8Gc4d","executionInfo":{"status":"ok","timestamp":1621789203010,"user_tz":-120,"elapsed":843,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"a1d5cc0e-cdb8-41c0-dacd-00c48a4ad011"},"source":["!python /content/NLP/evaluate.py /content/ELMO_final_with_broken_rows.json /content/ELMO_BROKEN_trainable_predictions_model1_multihead.json"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 14.015995804379179,\n","  \"f1\": 22.37922731771229,\n","  \"total\": 7627,\n","  \"HasAns_exact\": 14.015995804379179,\n","  \"HasAns_f1\": 22.37922731771229,\n","  \"HasAns_total\": 7627\n","}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1uzSjvdUKl0n"},"source":["####ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vgel7baCKmVa","executionInfo":{"status":"ok","timestamp":1621789236986,"user_tz":-120,"elapsed":920,"user":{"displayName":"Federico Zanini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjOnY3eXICY2l6WC2bCyNHFWIjqTySYUAOvZPz9fQ=s64","userId":"04782975204772265976"}},"outputId":"261774c9-3863-4a20-c18c-918d63f51003"},"source":["!python /content/NLP/evaluate.py /content/ELMO_final_NO_broken_rows.json /content/ELMO_NO_BROKEN_trainable_predictions_model1_multihead.json"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 15.740519914142618,\n","  \"f1\": 23.255404052258257,\n","  \"total\": 4193,\n","  \"HasAns_exact\": 15.740519914142618,\n","  \"HasAns_f1\": 23.255404052258257,\n","  \"HasAns_total\": 4193\n","}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"28EFd64sMntm"},"source":["#PREDICTING ELMo DATASET'S ANSWERS WITH BiDAF MODEL"]},{"cell_type":"markdown","metadata":{"id":"zAi710mxBLS2"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"5VpTkFVDMs8q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621846997495,"user_tz":-120,"elapsed":1858,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"de107dc8-8890-4ad0-c6f2-0807e0bcbdf0"},"source":["!wget https://github.com/federicozanini/NLP/releases/download/BIDAF/Bidaf.D-ATT.h5"],"execution_count":1,"outputs":[{"output_type":"stream","text":["--2021-05-24 09:03:15--  https://github.com/federicozanini/NLP/releases/download/BIDAF/Bidaf.D-ATT.h5\n","Resolving github.com (github.com)... 140.82.121.4\n","Connecting to github.com (github.com)|140.82.121.4|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://github-releases.githubusercontent.com/299663849/99142880-b7b9-11eb-8c8b-37bc96e71c90?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090315Z&X-Amz-Expires=300&X-Amz-Signature=59f768595758ec713b14c84ddf4380ff2904cb7b66677be468e2a092c04a5168&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DBidaf.D-ATT.h5&response-content-type=application%2Foctet-stream [following]\n","--2021-05-24 09:03:15--  https://github-releases.githubusercontent.com/299663849/99142880-b7b9-11eb-8c8b-37bc96e71c90?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210524%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20210524T090315Z&X-Amz-Expires=300&X-Amz-Signature=59f768595758ec713b14c84ddf4380ff2904cb7b66677be468e2a092c04a5168&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=299663849&response-content-disposition=attachment%3B%20filename%3DBidaf.D-ATT.h5&response-content-type=application%2Foctet-stream\n","Resolving github-releases.githubusercontent.com (github-releases.githubusercontent.com)... 185.199.108.154, 185.199.109.154, 185.199.110.154, ...\n","Connecting to github-releases.githubusercontent.com (github-releases.githubusercontent.com)|185.199.108.154|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 22722216 (22M) [application/octet-stream]\n","Saving to: ‘Bidaf.D-ATT.h5’\n","\n","Bidaf.D-ATT.h5      100%[===================>]  21.67M  58.5MB/s    in 0.4s    \n","\n","2021-05-24 09:03:16 (58.5 MB/s) - ‘Bidaf.D-ATT.h5’ saved [22722216/22722216]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8tHWc5Xx8vb3","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1621847000517,"user_tz":-120,"elapsed":1403,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"5337279a-c3dd-4da4-9362-5373f16e8add"},"source":["## (batch, seq)  ## ()\n","## Metric to is if the prediction is close to the true value \n","\n","import tensorflow.keras.backend as K\n","\n","def DistAccuracy(y_true, y_pred):\n","    if y_true.shape[1] == None:\n","      return 0\n","    l = y_true.shape[1]\n","    y_true = K.argmax(y_true, axis=-1)\n","    y_pred = K.argmax(y_pred, axis=-1)\n","    true_poss = K.cast(K.abs(y_true-y_pred), dtype=tf.float32)\n","    return (l-true_poss)/l\n","\n","\n","\n","'''\n","EXAMPLE: \n","\n","a = np.array([[0,1,0],[1,0,0], [0,0,1]])\n","b = np.array([[0,1,0],[0,1,0], [1,0,0]])\n","\n","DistAccuracy(a,b)\n","\n","'''"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\nEXAMPLE: \\n\\na = np.array([[0,1,0],[1,0,0], [0,0,1]])\\nb = np.array([[0,1,0],[0,1,0], [1,0,0]])\\n\\nDistAccuracy(a,b)\\n\\n'"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"6nB9z4cp82Yt","executionInfo":{"status":"ok","timestamp":1621847803270,"user_tz":-120,"elapsed":47888,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["##  ritorna un array di float32 di dimensione specificata \n","import gensim\n","import gensim.downloader as gloader\n","\n","emb_dimension = 100\n","download_path = \"glove-wiki-gigaword-{}\".format(emb_dimension)\n","try:\n","    word_emb_model = gloader.load(download_path)\n","except ValueError as e:\n","    print(\"Invalid embedding model name! Check the embedding dimension:\")\n","    print(\"Glove: 50, 100, 200, 300\")\n","    raise e"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"id":"xegfLAsZ84Um","executionInfo":{"status":"ok","timestamp":1621847076643,"user_tz":-120,"elapsed":22,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["def check_OOV_terms(emb_model, word_listing):\n","    oov_list = []\n","    for w in word_listing:\n","      if w not in emb_model.vocab.keys():\n","        oov_list.append(w)\n","    return oov_list"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"rmgPFzv686K2","executionInfo":{"status":"ok","timestamp":1621847076644,"user_tz":-120,"elapsed":16,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["# little utils func, find the index of a sequence inside a list \n","def find_sublist(l1, l2):\n","  for i, el in enumerate(l1):\n","    if l1[i:i+len(l2)]==l2:\n","      return i,i+len(l2)-1   \n","  return -1,-1"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"zLp_qzNY876u","executionInfo":{"status":"ok","timestamp":1621847340301,"user_tz":-120,"elapsed":292,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["import tqdm\n","\n","class Vocabulary(object):\n","  def __init__(self):\n","    self.char2idx = {'PAD':0, 'UNK': 1, ' ': 2}\n","    self.idx2char = {0: 'PAD',1: 'UNK', 2: ' '}\n","\n","\n","  def __len__(self):\n","    return len(self.char2idx)\n","  \n","  def __contains__(self, key):\n","    if type(key) == int:\n","      return key in self.idx2char\n","    elif type(key) == str:\n","      return key in self.char2idx\n","\n","  def __getitem__(self, key):\n","    if type(key) == int:\n","      return self.idx2char.get(key, 0)\n","    elif type(key) == str:\n","      return self.char2idx.get(key, 0)\n","\n","  def __setitem__(self, key, item):\n","    if type(key) == int and type(item) == str:\n","      self.idx2char[key] = item\n","    elif type(key) == str and type(item) == int:\n","      self.char2idx[key] = item\n","    else:\n","      raise RuntimeError('Invalid (key, item) types.')\n","  \n","  def add(self, token):\n","    if token not in self.char2idx:\n","      index = len(self.char2idx)\n","      self.char2idx[token] = index\n","      self.idx2char[index] = token\n","\n","  def get_vocab_list(self):\n","      words = [self[k] for k in range(0, len(self))]\n","      return words\n","\n","  def toidx(self, tokens):\n","        return [self[tok] for tok in tokens]\n","  \n","  \n","  def build(words):\n","    vocab = Vocabulary()\n","    for w in words: vocab.add(w)\n","    return vocab\n","\n","  #build vocab from context, question and answer char  \n","  def build_on_df(df):\n","    vocab = Vocabulary()\n","    for i, t in tqdm.tqdm(df.iterrows(), total = len(df)):\n","      \n","      for c in t['elmo_answer']: vocab.add(c)    \n","\n","      for c in t['question']: vocab.add(c)\n","\n","      #for c in t['text']: vocab.add(c)\n","\n","    return vocab "],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"id":"h8XVBPqR8-wm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621847342579,"user_tz":-120,"elapsed":908,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"454fdf01-318e-4d82-80f4-02c1272aef40"},"source":["###building char vocabulary \n","charVocab = Vocabulary.build_on_df(df_elmo_test_broken)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["100%|██████████| 7627/7627 [00:00<00:00, 7676.62it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"-4odXoqz9AQn","executionInfo":{"status":"ok","timestamp":1621847346060,"user_tz":-120,"elapsed":297,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["import random \n","\n","def prepare_data(df, emb_model, charVocab):\n","\n","  word_context = []\n","  word_question  = []\n","  char_context = [] \n","  char_question = []\n","  answer_start = []\n","  answer_end = []\n","\n","  unk_word = {}   \n","  \n","\n","\n","  for i, t in df.iterrows():\n","    temp_word = []\n","    temp_char  = []\n","    oov_terms = check_OOV_terms(word_emb_model, t['elmo_answer_list'])\n","\n","    # formatting context \n","    for word in t['elmo_answer_list']:\n","      #word embedding \n","      if word in oov_terms:\n","        temp_word.append(np.zeros((100,)))\n","        unk_word[word] = unk_word.get(word,0)+1 \n","      else:\n","        temp_word.append(emb_model.get_vector(word))\n","      #char emb\n","      temp_char.append(charVocab.toidx(word))  \n","    \n","    temp_char = tf.keras.preprocessing.sequence.pad_sequences(temp_char,dtype='int32', maxlen=20, padding=\"post\", value=0)\n","\n","    word_context.append(temp_word)\n","    char_context.append(temp_char)\n","\n","    # formatting output (ONE HOT ENCODED)\n","    #start = np.zeros(shape=(len(temp_word)))\n","    #end  = np.zeros(shape=(len(temp_word)))\n","    \n","    #start[t['answer_start']]=1\n","    #end[t['answer_end']]=1\n","    \n","    #answer_start.append(start)\n","    #answer_end.append(end)\n","\n","    # formatting question \n","    temp_word = []\n","    temp_char = []\n","    oov_terms = check_OOV_terms(emb_model, t['question_list'])\n","    \n","    for word in t['question_list']:\n","      if word in oov_terms:\n","        temp_word.append(np.zeros((100,)))\n","        unk_word[word] = unk_word.get(word,0)+1\n","      else:\n","        temp_word.append(emb_model.get_vector(word))\n","      temp_char.append(charVocab.toidx(word))  \n","    \n","    temp_char = tf.keras.preprocessing.sequence.pad_sequences(temp_char, dtype='int32', maxlen=20, padding=\"post\", value=0)\n","\n","    word_question.append(temp_word)\n","    char_question.append(temp_char)\n","\n","  word_context = tf.keras.preprocessing.sequence.pad_sequences(word_context, padding=\"post\", dtype='float32', value=0.0)\n","  word_question = tf.keras.preprocessing.sequence.pad_sequences(word_question, padding=\"post\", dtype='float32', value=0.0)\n","  char_context =  tf.keras.preprocessing.sequence.pad_sequences(char_context, padding=\"post\", dtype='float32', value=0.0)\n","  char_question = tf.keras.preprocessing.sequence.pad_sequences(char_question, padding=\"post\", dtype='float32', value=0.0)\n","  #answer_start = tf.keras.preprocessing.sequence.pad_sequences(answer_start, padding=\"post\", dtype='float32', value=0.0)\n","  #answer_end = tf.keras.preprocessing.sequence.pad_sequences(answer_end, padding=\"post\", dtype='float32', value=0.0)\n","\n","  return  (word_question, char_question, word_context, char_context)"],"execution_count":25,"outputs":[]},{"cell_type":"code","metadata":{"id":"C6NmWLXh9Czp","executionInfo":{"status":"ok","timestamp":1621847348696,"user_tz":-120,"elapsed":557,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["from keras import backend as K\n","from keras.engine.topology import Layer\n","from keras.layers import Dense, Activation, Multiply, Add, Lambda\n","from keras.initializers import Constant\n","from keras.layers.advanced_activations import Softmax\n","from keras.activations import linear\n","\n","\n","class Highway(Layer):\n","\n","    activation = None\n","    transform_gate_bias = None\n","\n","    def __init__(self, activation='relu', transform_gate_bias=-1, **kwargs):\n","        self.activation = activation\n","        self.transform_gate_bias = transform_gate_bias\n","        super(Highway, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        # Create a trainable weight variable for this layer.\n","        dim = input_shape[-1]\n","        transform_gate_bias_initializer = Constant(self.transform_gate_bias)\n","        input_shape_dense_1 = input_shape[-1]\n","        self.dense_1 = Dense(units=dim, bias_initializer=transform_gate_bias_initializer)\n","        self.dense_1.build(input_shape)\n","        self.dense_2 = Dense(units=dim)\n","        self.dense_2.build(input_shape)\n","        self.weights_matrix = self.dense_1.trainable_weights + self.dense_2.trainable_weights\n","\n","        super(Highway, self).build(input_shape)  # Be sure to call this at the end\n","\n","    def call(self, x):\n","        dim = K.int_shape(x)[-1]\n","        transform_gate = self.dense_1(x)\n","        transform_gate = Activation(\"sigmoid\")(transform_gate)\n","        carry_gate = Lambda(lambda x: 1.0 - x, output_shape=(dim,))(transform_gate)\n","        transformed_data = self.dense_2(x)\n","        transformed_data = Activation(self.activation)(transformed_data)\n","        transformed_gated = Multiply()([transform_gate, transformed_data])\n","        identity_gated = Multiply()([carry_gate, x])\n","        value = Add()([transformed_gated, identity_gated])\n","        return value\n","\n","    def compute_output_shape(self, input_shape):\n","        return input_shape\n","\n","    def get_config(self):\n","        config = super().get_config()\n","        config['activation'] = self.activation\n","        config['transform_gate_bias'] = self.transform_gate_bias\n","        return config\n","\n","class Similarity(Layer):\n","\n","    def __init__(self, **kwargs):\n","        super(Similarity, self).__init__(**kwargs)\n","\n","    def compute_similarity(self, repeated_context_vectors, repeated_query_vectors):\n","        element_wise_multiply = repeated_context_vectors * repeated_query_vectors\n","        concatenated_tensor = K.concatenate(\n","            [repeated_context_vectors, repeated_query_vectors, element_wise_multiply], axis=-1)\n","        dot_product = K.squeeze(K.dot(concatenated_tensor, self.kernel), axis=-1)\n","        return linear(dot_product + self.bias)\n","\n","    def build(self, input_shape):\n","        word_vector_dim = input_shape[0][-1]\n","        weight_vector_dim = word_vector_dim * 3\n","        self.kernel = self.add_weight(name='similarity_weight',\n","                                      shape=(weight_vector_dim, 1),\n","                                      initializer='uniform',\n","                                      trainable=True)\n","        self.bias = self.add_weight(name='similarity_bias',\n","                                    shape=(),\n","                                    initializer='ones',\n","                                    trainable=True)\n","        super(Similarity, self).build(input_shape)\n","\n","    def call(self, inputs):\n","        context_vectors, query_vectors = inputs\n","        num_context_words = K.shape(context_vectors)[1]\n","        num_query_words = K.shape(query_vectors)[1]\n","        context_dim_repeat = K.concatenate([[1, 1], [num_query_words], [1]], 0)\n","        query_dim_repeat = K.concatenate([[1], [num_context_words], [1, 1]], 0)\n","        repeated_context_vectors = K.tile(K.expand_dims(context_vectors, axis=2), context_dim_repeat)\n","        repeated_query_vectors = K.tile(K.expand_dims(query_vectors, axis=1), query_dim_repeat)\n","        similarity_matrix = self.compute_similarity(repeated_context_vectors, repeated_query_vectors)\n","        return similarity_matrix\n","\n","    def compute_output_shape(self, input_shape):\n","        batch_size = input_shape[0][0]\n","        num_context_words = input_shape[0][1]\n","        num_query_words = input_shape[1][1]\n","        return (batch_size, num_context_words, num_query_words)\n","\n","    def get_config(self):\n","        config = super().get_config()\n","        return config\n","\n","class Q2CAttention(Layer):\n","\n","    def __init__(self, **kwargs):\n","        super(Q2CAttention, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        super(Q2CAttention, self).build(input_shape)\n","\n","    def call(self, inputs):\n","        similarity_matrix, encoded_context = inputs\n","        max_similarity = K.max(similarity_matrix, axis=-1)\n","        # by default, axis = -1 in Softmax\n","        context_to_query_attention = Softmax()(max_similarity)\n","        weighted_sum = K.sum(K.expand_dims(context_to_query_attention, axis=-1) * encoded_context, -2)\n","        expanded_weighted_sum = K.expand_dims(weighted_sum, 1)\n","        num_of_repeatations = K.shape(encoded_context)[1]\n","        return K.tile(expanded_weighted_sum, [1, num_of_repeatations, 1])\n","\n","    def compute_output_shape(self, input_shape):\n","        similarity_matrix_shape, encoded_context_shape = input_shape\n","        return similarity_matrix_shape[:-1] + encoded_context_shape[-1:]\n","\n","    def get_config(self):\n","        config = super().get_config()\n","        return config\n","\n","class C2QAttention(Layer):\n","\n","    def __init__(self, **kwargs):\n","        super(C2QAttention, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        super(C2QAttention, self).build(input_shape)\n","\n","    def call(self, inputs):\n","        similarity_matrix, encoded_question = inputs\n","        context_to_query_attention = Softmax(axis=-1)(similarity_matrix)\n","        encoded_question = K.expand_dims(encoded_question, axis=1)\n","        return K.sum(K.expand_dims(context_to_query_attention, axis=-1) * encoded_question, -2)\n","\n","    def compute_output_shape(self, input_shape):\n","        similarity_matrix_shape, encoded_question_shape = input_shape\n","        return similarity_matrix_shape[:-1] + encoded_question_shape[-1:]\n","\n","    def get_config(self):\n","        config = super().get_config()\n","        return config\n","\n","class MergedContext(Layer):\n","\n","    def __init__(self, **kwargs):\n","        super(MergedContext, self).__init__(**kwargs)\n","\n","    def build(self, input_shape):\n","        super(MergedContext, self).build(input_shape)\n","\n","    def call(self, inputs):\n","        encoded_context, context_to_query_attention, query_to_context_attention = inputs\n","        element_wise_multiply1 = encoded_context * context_to_query_attention\n","        element_wise_multiply2 = encoded_context * query_to_context_attention\n","        concatenated_tensor = K.concatenate(\n","            [encoded_context, context_to_query_attention, element_wise_multiply1, element_wise_multiply2], axis=-1)\n","        return concatenated_tensor\n","\n","    def compute_output_shape(self, input_shape):\n","        encoded_context_shape, _, _ = input_shape\n","        return encoded_context_shape[:-1] + (encoded_context_shape[-1] * 4, )\n","\n","    def get_config(self):\n","        config = super().get_config()\n","        return config"],"execution_count":26,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tQR3uIet9IyM"},"source":["## Loading Model"]},{"cell_type":"code","metadata":{"id":"4xu7T4Dq9GBs","executionInfo":{"status":"ok","timestamp":1621847353484,"user_tz":-120,"elapsed":2961,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["## load model \n","model = tf.keras.models.load_model(\n","    \"./Bidaf.D-ATT.h5\", custom_objects={\"DistAccuracy\": DistAccuracy, \"Similarity\": Similarity, \"C2QAttention\":C2QAttention, \"Q2CAttention\": Q2CAttention, \"MergedContext\" : MergedContext}, compile=True, options=None\n",")"],"execution_count":27,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zFC_Wo909W-Z"},"source":["## PREDICTING WITH BiDAF MODEL"]},{"cell_type":"markdown","metadata":{"id":"pbyIPO_8pVs0"},"source":["###ELMO DATASET WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"vfPw-GMm9sgU","executionInfo":{"status":"ok","timestamp":1621847367316,"user_tz":-120,"elapsed":11543,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["test = prepare_data(df_elmo_test_broken, word_emb_model, charVocab)"],"execution_count":28,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wf4_qrBV9tSM","executionInfo":{"status":"ok","timestamp":1621847755390,"user_tz":-120,"elapsed":388097,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["start, end = model.predict(test)\n","start = start.squeeze()\n","end = end.squeeze()\n","start = tf.math.argmax(start, axis = 1)\n","end = tf.math.argmax(end, axis=1)"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"id":"B04QxU-t9vBH","executionInfo":{"status":"ok","timestamp":1621847804381,"user_tz":-120,"elapsed":6,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["df_elmo_test_broken['p_start'] = start\n","df_elmo_test_broken['p_end'] = end"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"JooiVC5R9wlo","executionInfo":{"status":"ok","timestamp":1621847807279,"user_tz":-120,"elapsed":1237,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["answer = []\n","for i, row in df_elmo_test_broken.iterrows():\n","  answer.append(\" \".join(row['elmo_answer_list'][row['p_start']:row['p_end']+1]))"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"id":"6qsEZNZ59zcV","executionInfo":{"status":"ok","timestamp":1621847810053,"user_tz":-120,"elapsed":1165,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["df_elmo_test_broken['p_answer'] = answer"],"execution_count":33,"outputs":[]},{"cell_type":"code","metadata":{"id":"9AMzj28691D7","executionInfo":{"status":"ok","timestamp":1621847813261,"user_tz":-120,"elapsed":1120,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["evaluation = {row['id']:row['p_answer'] for i, row in df_elmo_test_broken.iterrows()}"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"id":"FjJadmh393Bn","executionInfo":{"status":"ok","timestamp":1621847814624,"user_tz":-120,"elapsed":7,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["with open('P_ans.json', 'w+') as f:\n","    # this would  place the entire output on one line\n","    # use json.dump(lista_items, f, indent=4) to \"pretty-print\" with four spaces per indent\n","    json.dump(evaluation, f)"],"execution_count":35,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ijpr7Rh5pYKF"},"source":["###ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"in_WpPVMM0_i","executionInfo":{"status":"ok","timestamp":1621847825509,"user_tz":-120,"elapsed":7312,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["test = prepare_data(df_elmo_test_no_broken, word_emb_model, charVocab)"],"execution_count":36,"outputs":[]},{"cell_type":"code","metadata":{"id":"xevfA0wJM1WU","executionInfo":{"status":"ok","timestamp":1621848025743,"user_tz":-120,"elapsed":186306,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["start, end = model.predict(test)\n","start = start.squeeze()\n","end = end.squeeze()\n","start = tf.math.argmax(start, axis = 1)\n","end = tf.math.argmax(end, axis=1)"],"execution_count":37,"outputs":[]},{"cell_type":"code","metadata":{"id":"KzhCdfzrM1n_","executionInfo":{"status":"ok","timestamp":1621848050738,"user_tz":-120,"elapsed":365,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["df_elmo_test_no_broken['p_start'] = start\n","df_elmo_test_no_broken['p_end'] = end"],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"id":"E1vw5_b0M19N","executionInfo":{"status":"ok","timestamp":1621848051753,"user_tz":-120,"elapsed":12,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["answer = []\n","for i, row in df_elmo_test_no_broken.iterrows():\n","  answer.append(\" \".join(row['elmo_answer_list'][row['p_start']:row['p_end']+1]))"],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"id":"uC8zrAdCM2M2","executionInfo":{"status":"ok","timestamp":1621848051754,"user_tz":-120,"elapsed":9,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["df_elmo_test_no_broken['p_answer'] = answer"],"execution_count":40,"outputs":[]},{"cell_type":"code","metadata":{"id":"0U21-1nkM2d_","executionInfo":{"status":"ok","timestamp":1621848053444,"user_tz":-120,"elapsed":374,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["evaluation = {row['id']:row['p_answer'] for i, row in df_elmo_test_no_broken.iterrows()}"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"88wS1mT8M2u6","executionInfo":{"status":"ok","timestamp":1621848053731,"user_tz":-120,"elapsed":5,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}}},"source":["with open('P_ans_NO_BROKEN.json', 'w+') as f:\n","    # this would  place the entire output on one line\n","    # use json.dump(lista_items, f, indent=4) to \"pretty-print\" with four spaces per indent\n","    json.dump(evaluation, f)"],"execution_count":42,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9aMstU8VBP-b"},"source":["##EVALUATION"]},{"cell_type":"markdown","metadata":{"id":"tPCKlK6DpOgO"},"source":["###ELMO DATASET WITH BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"1dXm3tti943K","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621848057128,"user_tz":-120,"elapsed":739,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"75dec06c-cdc6-409d-9928-494aced5dd48"},"source":["!python NLP/evaluate.py /content/ELMO_final_with_broken_rows.json P_ans.json"],"execution_count":43,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 59.13203094270355,\n","  \"f1\": 70.4931899751092,\n","  \"total\": 7627,\n","  \"HasAns_exact\": 59.13203094270355,\n","  \"HasAns_f1\": 70.4931899751092,\n","  \"HasAns_total\": 7627\n","}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RDEJXOGCpLq9"},"source":["###ELMO WITHOUT BROKEN ROWS"]},{"cell_type":"code","metadata":{"id":"8A1r05YhNVs4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621848122706,"user_tz":-120,"elapsed":735,"user":{"displayName":"Lucia La Forgia","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjuKjiaJfOTabhl3dAkFPnV4cLUt0iCusTfbLC2gw=s64","userId":"09318699342703866223"}},"outputId":"7050dcde-8345-4b06-ce4a-8066c1aaec7a"},"source":["!python NLP/evaluate.py /content/ELMO_final_NO_broken_rows.json P_ans_NO_BROKEN.json"],"execution_count":46,"outputs":[{"output_type":"stream","text":["{\n","  \"exact\": 66.01478654901025,\n","  \"f1\": 75.96020888527902,\n","  \"total\": 4193,\n","  \"HasAns_exact\": 66.01478654901025,\n","  \"HasAns_f1\": 75.96020888527902,\n","  \"HasAns_total\": 4193\n","}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"U8iGDK1yrWr7"},"source":[""],"execution_count":null,"outputs":[]}]}